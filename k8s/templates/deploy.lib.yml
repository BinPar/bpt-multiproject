#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")
#@ load("utils.star", "utils")

#@ def cpu(n):
#@   return str(n)+"m"
#@ end

#@ def memory(n):
#@   return "{}Mi".format(n)
#@ end

#@ def getPodSpec(project):
#@ projectResource = utils.getResourcesForProject(project)
metadata:
  labels: #@ utils.defaultLabels("pod", project)
spec:
  #@ if data.values.volumes:
  volumes:
  #@   for volume in data.values.volumes:
    - #@ {"name": volume.name, "persistentVolumeClaim": volume.persistentVolumeClaim}
  #@   end
  #@ end
  #@ if/end data.values.resourceType != 'Deploy':
  restartPolicy: Never
  containers:
    - image: #@ utils.imageName()
      imagePullPolicy: Always
      name: app
      envFrom:
        - configMapRef:
            name: #@ utils.defaultConfigMapName()
        #@ if data.values.additionalDeployEnvSources:
        #@   for envSource in data.values.additionalDeployEnvSources:
        - #@ utils.recursiveLookupForStringAndReplace(envSource, "##ENVIRONMENT", data.values.environment)
        #@   end
        #@ end
      #@ if data.values.additionalDeployEnv:
      env:
        #@   for env in data.values.additionalDeployEnv:
        - #@ utils.recursiveLookupForStringAndReplace(env, "##ENVIRONMENT", data.values.environment)
        #@   end
      #@ end
      #@ if data.values.volumes:
      securityContext:
        privileged: true
      volumeMounts:
      #@   for volume in data.values.volumes:
        - #@ {"name": volume.name, "mountPath": volume.mountPath}
      #@   end
      #@ end
      #@ if data.values.useHttp:
      ports:
        - containerPort: 8080
          name: main-http
      readinessProbe: #@ data.values.readinessProbe
      livenessProbe: #@ data.values.livenessProbe
      #@ end
      resources:
        requests:
          memory: #@ memory(projectResource.baseRAMRequest * projectResource.releaseFactorRAMRequest) if utils.isRelease() else memory(projectResource.baseRAMRequest)
          cpu: #@ cpu(projectResource.baseCPURequest * projectResource.releaseFactorCPURequest) if utils.isRelease() else cpu(projectResource.baseCPURequest)
        limits:
          memory: #@ memory(projectResource.baseRAMLimit * projectResource.releaseFactorRAMLimit) if utils.isRelease() else memory(projectResource.baseRAMLimit)
          cpu: #@ cpu(projectResource.baseCPULimit * projectResource.releaseFactorCPULimit) if utils.isRelease() else cpu(projectResource.baseCPULimit)
  #@ if/end data.values.podAdditionalConfig:
  _: #@ template.replace(data.values.podAdditionalConfig)
  #@ if/end data.values.podAdditionalConfigByEnvironment and data.values.podAdditionalConfigByEnvironment[data.values.environment]:
  _: #@ template.replace(data.values.podAdditionalConfigByEnvironment[data.values.environment])
#@ end

#@ def getDeploy(project):
#@ projectResource = utils.getResourcesForProject(project)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ utils.deployName()
  labels: #@ utils.defaultLabels("deploy", project)
  namespace: #@ utils.namespaceName(project)
spec:
  replicas: #@ int(projectResource.baseReplicas * projectResource.releaseFactorReplicas) if utils.isRelease() else int(projectResource.baseReplicas)
  revisionHistoryLimit: #@ projectResource.baseRevisionHistoryLimit * projectResource.releaseFactorHistoryLimit if utils.isRelease() else projectResource.baseRevisionHistoryLimit
  selector:
    matchLabels: #@ utils.defaultLabels("pod", project)
  template: #@ getPodSpec(project)
#@ end
